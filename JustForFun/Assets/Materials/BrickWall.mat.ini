[CONFIG]
; Material domain options: SURFACE, BACKGROUND, TRANSLUCENT, DEBUG, POST_PROCESS, UI
material-domain = SURFACE
; Light model options: PHONG, BLINN_PHONG, GOURAUD, PBR, UNLIT
light-model = BLINN_PHONG
; Side: Specifies which polygon side is rendered, assuming Counter-clock-wise face winding. Options: FRONT, BACK, TWO_SIDED
side = FRONT
; Set to true to use sampled normals from normal map. Otherwise, primitive normal will be used
use-normal-map = true

[TEXTURES]
tex_diff = Textures/brick_wall_diff.tex.ini
tex_nor = Textures/brick_wall_nor.tex.ini
tex_spec = Textures/brick_wall_spec.tex.ini

;tex_diff = test_bricks_diff.tex.ini
;tex_nor = test_bricks_normal.tex.ini
;tex_disp = test_bricks_disp.tex.ini
;tex_height = test_bricks_height.tex.ini

;[CUBEMAPS]
;cube0 = Cubemap_1.tex.ini

[MATERIAL]
void material()
{
	// Basckground output
	// bgColor = vec4(0.0);

	// Parallax mapping operations (Valid for Phong, Blinn Phong, PBR and Unlit)
	//height = texture(tex_height, uv); // Comment this line if you use parallaxMappingDisplacement() or parallaxMappingHeight()
	//displacement = vec4(0.0); // texture(tex_disp, uv); // This channel is the inverse of height channel. Comment this line if you use parallaxMappingDisplacement() or parallaxMappingHeight()
	parallaxIntensity = 0.1;
	//parallaxMapping(); // Uncomment this line to use standard parallax mapping
	//parallaxMappingDisplacement(tex_disp); // Advanced version of parallaxMapping(). It receives a displacement texture as parameter
	//parallaxMappingHeight(tex_height); // Advanced version of parallaxMapping(). It receives a height texture as parameter

	// Unlit output
	// diffuse = texture(tex2, uv) * 0.5;
	// opacity = vec4(0.5); // Only works if material-domain = TRANSLUCENT
	// emissive = vec4(0.0); 

	// Phong & Gouraud output (No texture sampling is allowed in Gouraud)
	diffuse = texture(tex_diff, uv);
	specular = texture(tex_spec, uv);
	shininess = vec4(200.0); // Specular exponent
	ambient = texture(tex_diff, uv) * 0.02;
	emissive = vec4(0.0);
	normal = texture(tex_nor, uv); // Only works if use-normal-map = true
	opacity = vec4(0.7); // Only works if material-domain = TRANSLUCENT
	lightmap = vec4(0.0);
	reflection = texture(tex_spec, uv) * 0.5;

	// PBR output
	// baseColor = vec4(0.0);
	// normalCamera = vec4(0.0);
	// emissionColor = vec4(0.0);
	// metalness = vec4(0.0);
	// roughness = vec4(0.0);
	// ambientOcclusion = vec4(0.0);

	// sheen = vec4(0.0);
	// clearCoat = vec4(0.0);
	// transmission = vec4(0.0);
}