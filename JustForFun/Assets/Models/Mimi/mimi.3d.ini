[MODEL]
path = Models/Mimi/mimi.glb

[CONFIG]
; Process the model to convert quads and other polygons into triangles. This option does nothing with points and lines
triangulate = true
; Process the model to flip UV coordianes on Y axis. This option adjust material setting and bitangents accordingly
flip-uv = false
; Merge all nodes that have meshes without animations, bones, lights or cameras, reducing also the number of meshes. This is a huge performance boost.
; CAREFUL! Node hierarchy will be lost and loading times will be increased
optimize = true
; Calculate tangents and bitangents per vertex. This option won't do anything if model doesn't have normals
calculate-tangents = true
; Use normals from normal map. Options:
; true: Use normal from normal map if there's any. Otherwise, primitive normal will be used.
; false: Use primitive normals
; force: Use normal from normal map even if there isn't a normal map present. The user must provide the normal map via materialOverrides function
use-normal-map = true
; Set to true to use parallax mapping if a height map or displacement map is included in model
use-parallax-map = false
; Set this to true to enable translucency if the model has opacity < 1.0 or has a texture in 'opacity' channel. 
; Translucent objects have an impact on performance
enable-translucency = false
; Set this to true if you want to see the back side of polygons
render-back-faces = false
; Selects the light model of this object, which will determine the internal shader used to draw it and 
; the variables that can be used in materialOverrides function. Options: BLINN_PHONG, PBR
light-model = BLINN_PHONG
; If light-model == PBR, the next line determines the workflow used. Options:
; METALLIC: Uses variables baseColor, metalness and roughness. These variables are set automatically if they are textures associated to them.
; SPECULAR: Uses variables albedo, specular and glossiness. These variables are not set automatically, so use materialOverrides function to do it
pbr-workflow = METALLIC

[TEXTURES]
;tex_base_color = Models/HoverCar/hover_car_base_color.tex.ini
;tex_metal = Models/HoverCar/hover_car_metallic.tex.ini
;tex_roughness = Models/HoverCar/hover_car_roughness.tex.ini
;
;tex_normal = Models/HoverCar/hover_car_normal.tex.ini
;tex_emissive = Models/HoverCar/hover_car_emissive.tex.ini
;tex_height = Models/HoverCar/hover_car_height.tex.ini

[DEBUG]
; Path to an external material that will be used for debugging purposes. 
; This material won't replace the original one, but will add another renderComponent to the GameObject
;debug-mat-path = Material_Debug.mat.ini

[MATERIAL]
void materialOverrides()
{
	// materialOverrides() function is meant to modify some aspect of original material() function, 
	// which in case of model loading, it's automatically generated based on model's internal date.
	// materialOverrides() is executed just after material() function in shaders

	//parallaxIntensity = 0.01;
	//parallaxMappingHeight(tex_height);
	
	//baseColor = texture(tex_base_color, uv);
	//metalness = texture(tex_metal, uv);
	//roughness = texture(tex_roughness, uv);
	
	//normalCamera = texture(tex_normal, uv);
	//emissionColor = pow(texture(tex_emissive, uv), vec4(2.0f)) * 3.0f;
	//ambientOcclusion = vec4(1.0);
}